#########################################
####      Logging Configuration      ####
#########################################

# Path where the logfile will be created
log_path            = /var/log/hidra

# Filename used for logging
log_name            = datamanager.log

# File size before rollover in B (linux only)
# 10 MB
log_size            = 10485760

# Name with which the service should be running
procname            = hidra

# IP/DNS name of the interface to bind to for external communication
ext_ip              = 0.0.0.0

#########################################
####   SignalHandler Configuration   ####
#########################################

# Port number to receive signals from
com_port            = 50000

# List of hosts allowed to connect
whitelist           = ["localhost"]

# ZMQ port to get new requests
request_port        = 50001

#########################################
####   EventDetector Configuration   ####
#########################################

# Type of event detector to use (options are:
# inotifyx_events, watchdog_events, zmq_events, http_events)
# Inotifyx is not python3 compatible,
# see https://bugs.launchpad.net/inotifyx/+bug/1006053
event_detector_type = inotifyx_events

# Subdirectories to be monitored and to store data to. These directory have to
# exist when HiDRA is started and should not be removed during the run.
# (needed if eventDetector is inotifyx_events or watchdog_events
#  or if dataFetcher is file_fetcher)
fix_subdirs          = ["commissioning/raw", "commissioning/scratch_bl",
                        "current/raw", "current/scratch_bl",
                        "local"]

# Directory to be monitor for changes
# Inside this directory only the subdirectories "commissioning", "current"
# and "local" are monitored
# (needed if event detector is inotifyx_events or watchdog_events)
monitored_dir       = /ramdisk

# Event type of files (options are: IN_CLOSE_WRITE, IN_MOVED_TO, ...) and
# the formats to be monitored, files in an other format will be be neglected
# (needed if event detector is inotifyx_events or watchdog_events)
monitored_events     = {"IN_MOVED_TO": [".tif", ".cbf", ".img", ".edf"],
                        "IN_CLOSE_WRITE": [".log"]}

# Number of events stored to look for doubles
# (needed if eventDetector is inotifyx_events or http_events)
history_size         = 0

# Flag describing if a clean up thread which regularly checks
# if some files were missed should be activated
# (needed if eventDetector is inotifyx_events)
use_cleanup          = False

#########################################
####    DataFetcher Configuration    ####
#########################################

# Module with methods specifying how to get the data
# (options are "file_fetcher", "zmq_fetcher", "http_fetcher")
data_fetcher_type    = file_fetcher

# Number of parallel data streams
number_of_streams    = 4

# Enable ZMQ pipe into storage system
# (uses the fixed_stream_host and fixed_stream_port)
use_data_stream      = True
# Fixed host to send the data to with highest priority
fixed_stream_host    = asap3-p00
# Fixed port to send the data to with highest priority
fixed_stream_port    = 50100

# Chunk size of file-parts getting send via zmq
#1024*1024*10
chunksize            = 10485760

# Flag describing if the data should be stored in localTarget
# (needed if data_fetcher_type is file_fetcher or http_fetcher)
store_data           = False

# Flag describing if the files should be removed from the source
# options are:
# True - data stays on the source
# False - data is removed from the source after processing it
# (needed if data_fetcher_type is file_fetcher or http_fetcher)
remove_data          = True
