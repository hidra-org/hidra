#########################################
####      Logging Configuration      ####
#########################################

# Path where the logfile will be created
log_path            = /opt/hidra/logs
#log_path            = /var/log/hidra

# Filename used for logging
log_name            = datamanager.log

# File size before rollover in B (linux only)
# 10 MB
log_size            = 10485760

# Name with which the service should be running
procname            = hidra

# IP/DNS name of the interface to bind to for external communication
ext_ip              = 0.0.0.0
#ext_ip              = zitpcx19282
#ext_ip              = 131.169.185.121 ; #zitpcx19282
#ext_ip              = 131.169.251.55 ; #asap3-p00

#########################################
####   SignalHandler Configuration   ####
#########################################

# Port number to receive signals from
com_port            = 50000

# List of hosts allowed to connect
whitelist           = ["localhost"]
#whitelist           = ["localhost", "zitpcx19282", "zitpcx22614", "zitpcx22614w", "zitpcx22614.fritz.box", "lsdma-lab04", "haspp11eval01", "it-hpc-cxi03", "max-cfel015"]
#whitelist           = None

# ZMQ port to get new requests
request_port        = 50001

# ZMQ port to forward requests
# (needed if running on Windows)
request_fw_port     = 50002

# ZMQ port to disribute control signals
# (needed if running on Windows)
control_pub_port    = 50005
control_sub_port    = 50006

#########################################
####   EventDetector Configuration   ####
#########################################

# Type of event detector to use (options are:
# inotifyx_events, watchdog_events, zmq_events, http_events)
# Inotifyx is not python3 compatible,
# see https://bugs.launchpad.net/inotifyx/+bug/1006053
event_detector_type = inotifyx_events
#event_detector_type = watchdog_events
#event_detector_type = zmq_events
#event_detector_type = http_events

# Subdirectories to be monitored and to store data to. These directory have to
# exist when HiDRA is started and should not be removed during the run.
# (needed if eventDetector is inotifyx_events or watchdog_events
#  or if dataFetcher is file_fetcher)
fix_subdirs          = ["commissioning", "current", "local"]
#fix_subdirs          = ["commissioning/raw", "commissioning/scratch_bl",
#                        "current/raw", "current/scratch_bl",
#                        "local"]

# Directory to be monitor for changes
# Inside this directory only the subdirectories "commissioning", "current"
# and "local" are monitored
# (needed if event detector is inotifyx_events or watchdog_events)
monitored_dir        = /opt/hidra/data/source
#monitored_dir       = /rd
#monitored_dir       = /ramdisk

# Event type of files (options are: IN_CLOSE_WRITE, IN_MOVED_TO, ...) and
# the formats to be monitored, files in an other format will be be neglected
# (needed if event detector is inotifyx_events or watchdog_events)
monitored_events     = {"IN_CLOSE_WRITE": [""]}
#monitored_events     = {"IN_CLOSE_WRITE": [".tif", ".cbf", ".nxs"],
#                        "IN_MOVED_TO": [".log"]}
#monitored events     = {"IN_MOVED_TO": [".tif", ".cbf", ".nxs"],
#                        "IN_CLOSE_WRITE": [".log"]}
#monitored_events     = {"NO_EVENT_MONITORED": [".cbf"]}

# Number of events stored to look for doubles
# (needed if eventDetector is inotifyx_events or http_events)
history_size         = 0

# Flag describing if a clean up thread which regularly checks
# if some files were missed should be activated
# (needed if eventDetector is inotifyx_events)
use_cleanup          = False

# Intervall time (in seconds) used for clean up resp. checking of events
# (only needed if event_detector_type is inotifyx_events together with
#  use_cleanup enabled or if event_detector is watchdog_events)
#action_time          = 150
action_time          = 10

# Time (in seconds) since last modification after which a file will be seen as closed
# (needed if eventDetector is inotifyx_events (for clean up) or watchdog_events)
time_till_closed     = 2

# ZMQ port to get events from
# (needed if event_detector_type is zmq_events)
event_det_port       = 50003

# IP/DNS name of the Eiger detector
# (needed if event_detector_type is http_events)
#haspp11e1m.desy.de
#eiger_ip             = 192.168.138.52
eiger_ip             = lsdma-lab04
#lsdma-lab04.desy.de
#eiger_ip             = 131.169.55.170
# API version of the Eiger detector
# (needed if event_detector_type is http_events)
eiger_api_version    = 1.5.0


#########################################
####    DataFetcher Configuration    ####
#########################################

# Module with methods specifying how to get the data
# (options are "file_fetcher", "zmq_fetcher", "http_fetcher")
data_fetcher_type    = file_fetcher
#data_fetcher_type    = zmq_fetcher
#data_fetcher_type    = http_fetcher

# If "zmq_fetcher" is specified as data_fetcher_type it needs a port to listen to
# (needed if event_detector_type is zmq_events)
data_fetcher_port    = 50010

# Number of parallel data streams
number_of_streams    = 8

# Enable ZMQ pipe into storage system
# (uses the fixed_stream_host and fixed_stream_port)
use_data_stream      = False
# Fixed host to send the data to with highest priority
fixed_stream_host    = zitpcx19282
#fixed_stream_host    = zitpcx22614w
# Fixed port to send the data to with highest priority
fixed_stream_port    = 50100

# Chunk size of file-parts getting send via zmq
#1024*1024*10
chunksize            = 10485760
#1024*1024*1024
#chunksize            = 1073741824

# ZMQ-router port which coordinates the load-balancing to the worker-processes
# (needed if running on Windows)
router_port          = 50004

# Target to move the files into (needed if store_data is enabled)
local_target         = /opt/hidra/data/target
#local_target         = /gpfs

# Flag describing if the data should be stored in localTarget
# (needed if data_fetcher_type is file_fetcher or http_fetcher)
store_data           = False

# Flag describing if the files should be removed from the source
# options are:
# True - data stays on the source
# False - data is removed from the source after processing it
# with_confirmation - only supported if use_data_stream is enabled;
#                     data is removed from the source only after the target
#                     sent a verification
# (needed if data_fetcher_type is file_fetcher or http_fetcher)
remove_data          = False
